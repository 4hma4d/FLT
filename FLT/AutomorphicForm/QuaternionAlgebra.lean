/-
Copyright (c) 2024 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard
-/
import Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup
import Mathlib.Geometry.Manifold.Instances.UnitsOfNormedAlgebra
import Mathlib.NumberTheory.NumberField.Basic
import Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing
import FLT.HIMExperiments.module_topology
--import Mathlib

/-

# Definition of automorphic forms on a totally definite quaternion algebra
-/

suppress_compilation

variable (F : Type*) [Field F] [NumberField F]

variable (D : Type*) [Ring D] [Algebra F D] [FiniteDimensional F D]

#check DedekindDomain.FiniteAdeleRing

open DedekindDomain

open scoped NumberField

#check FiniteAdeleRing (ùìû F) F

-- my work (two PRs)
instance : TopologicalSpace (FiniteAdeleRing (ùìû F) F) := sorry
instance : TopologicalRing (FiniteAdeleRing (ùìû F) F) := sorry

open scoped TensorProduct

#check D ‚äó[F] (FiniteAdeleRing (ùìû F) F)

section missing_instances

variable {R D A : Type*} [CommRing R] [Ring D] [CommRing A] [Algebra R D] [Algebra R A]

--TODO:
instance : Algebra A (D ‚äó[R] A) :=
  Algebra.TensorProduct.includeRight.toRingHom.toAlgebra' (by
    simp only [AlgHom.toRingHom_eq_coe, RingHom.coe_coe, Algebra.TensorProduct.includeRight_apply]
    intro a b
    apply TensorProduct.induction_on (motive := fun b ‚Ü¶ 1 ‚äó‚Çú[R] a * b = b * 1 ‚äó‚Çú[R] a)
    . simp only [mul_zero, zero_mul]
    . intro d a'
      simp only [Algebra.TensorProduct.tmul_mul_tmul, one_mul, mul_one]
      rw [NonUnitalCommSemiring.mul_comm]
    . intro x y hx hy
      rw [left_distrib, hx, hy, right_distrib]
    )



instance [Module.Finite R D] : Module.Finite A (D ‚äó[R] A) := sorry

instance [Module.Free R D]  : Module.Free A (D ‚äó[R] A) := sorry


end missing_instances
-- your work
instance : TopologicalSpace (D ‚äó[F] (FiniteAdeleRing (ùìû F) F)) := Module.topology (FiniteAdeleRing (ùìû F) F)
instance : TopologicalRing (D ‚äó[F] (FiniteAdeleRing (ùìû F) F)) := moobar (FiniteAdeleRing (ùìû F) F) (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))

namespace TotallyDefiniteQuaternionAlgebra

noncomputable example : D ‚Üí+* (D ‚äó[F] FiniteAdeleRing (ùìû F) F) := by exact
  Algebra.TensorProduct.includeLeftRingHom

abbrev Dfx := (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£
noncomputable abbrev incl : DÀ£ ‚Üí* Dfx F D := Units.map Algebra.TensorProduct.includeLeftRingHom.toMonoidHom

structure AutomorphicForm (M : Type*) [AddCommGroup M] where
  toFun : (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£ ‚Üí M
  left_invt : ‚àÄ (d : DÀ£) (x : (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£),
    toFun (Units.map Algebra.TensorProduct.includeLeftRingHom.toMonoidHom d * x) = toFun x
  loc_cst : ‚àÉ U : Subgroup (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£,
    IsOpen (U : Set (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£) ‚àß
    ‚àÄ (x : (D ‚äó[F] (FiniteAdeleRing (ùìû F) F))À£),
    ‚àÄ u ‚àà U, toFun (x * u) = toFun x

namespace AutomorphicForm

variable (M : Type*) [AddCommGroup M]

instance : CoeFun (AutomorphicForm F D M) (fun _ ‚Ü¶ Dfx F D ‚Üí M) where
  coe := toFun

instance zero : (AutomorphicForm F D M) where
  toFun := 0
  left_invt := by simp
  loc_cst := by use ‚ä§; simp

instance  neg (œÜ : AutomorphicForm F D M) : AutomorphicForm F D M where
  toFun x := - œÜ x
  left_invt := by
    intro d x
    simp only [RingHom.toMonoidHom_eq_coe, neg_inj]
    exact œÜ.left_invt d x
  loc_cst := by
    rcases œÜ.loc_cst with ‚ü®U, openU, hU‚ü©
    use U
    exact ‚ü®openU, fun x u umem ‚Ü¶ by rw [neg_inj]; exact hU x u umem‚ü©

instance add (œÜ œà : AutomorphicForm F D M) : AutomorphicForm F D M where
  toFun x := œÜ x + œà x
  left_invt := by
    intro d x
    simp only [‚Üê œÜ.left_invt d x, ‚Üê œà.left_invt d x]
  loc_cst := by
    rcases œÜ.loc_cst with ‚ü®U, openU, hU‚ü©
    rcases œà.loc_cst with ‚ü®V, openV, hV‚ü©
    use U ‚äì V
    constructor
    ¬∑ unfold Subgroup.instInf Submonoid.instInf
      simp only [Subgroup.coe_toSubmonoid, Subgroup.coe_set_mk]
      exact IsOpen.inter openU openV
    ¬∑ intro x u ‚ü®umemU, umemV‚ü©
      simp only
      rw [hU x u umemU, hV x u umemV]

instance zero' : Zero (AutomorphicForm F D M) where
  zero := zero F D M

instance add' : Add (AutomorphicForm F D M) where
  add := add F D M

instance : AddCommGroup (AutomorphicForm F D M) where
  add œÜ œà := œÜ.add œà
  add_assoc := sorry
  zero := zero F D M
  zero_add := sorry
  add_zero := sorry
  nsmul := nsmulRec
  nsmul_zero := fun x ‚Ü¶ by rw [nsmulRec]
  nsmul_succ := fun n x ‚Ü¶  by rw [nsmulRec]
  neg œÜ := œÜ.neg
  sub := sorry
  sub_eq_add_neg := sorry
  zsmul := sorry
  zsmul_zero' := sorry
  zsmul_succ' := sorry
  zsmul_neg' := sorry
  add_left_neg := sorry
  add_comm := sorry


instance : MulAction (Dfx F D) (AutomorphicForm F D M) where
  smul g œÜ :=   {
    toFun := fun x => œÜ  (x*g),
    left_invt := by
      intros d x
      simp only [‚Üê œÜ.left_invt d x]
      rw [mul_assoc]
      exact œÜ.left_invt d (x * g)
    loc_cst := by
      rcases œÜ.loc_cst with ‚ü®U, openU, hU‚ü©
      use U
      constructor
      ¬∑ exact openU
      ¬∑ intros x u umem
        simp only
        sorry
  } -- (g ‚Ä¢ f) (x) := f(xg) -- x(gf)=(xg)f
  one_smul := by
    intros œÜ
    have h:{toFun := fun x => œÜ (x * 1), left_invt := ?_, loc_cst := ?_} = œÜ := by
      simp only [mul_one]
    exact h
  mul_smul := by
    intros g h œÜ
    sorry
-- if M is an R-module (e.g. if M = R!), then Automorphic forms are also an R-module
-- with the action being 0on the coefficients.

example(a b c :‚Ñù ): a * b * c = (a * b) * c := rfl
