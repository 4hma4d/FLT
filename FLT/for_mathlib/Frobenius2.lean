/-
Copyright (c) 2024 Jou Glasheen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jou Glasheen, Amelia Livingston, Jujian Zhang, Kevin Buzzard
-/
import Mathlib.RingTheory.DedekindDomain.Ideal
import Mathlib.RingTheory.IntegralRestrict
import Mathlib.RingTheory.Ideal.QuotientOperations
import Mathlib.FieldTheory.Cardinality

/-

# Frobenius elements

Definition of Frob_Q ‚àà Gal(L/K) where L/K is a finite Galois extension of number fields
and Q is a maximal ideal of the integers of L. In fact we work in sufficient generality
that the definition will also work in the function field over a finite field setting.

## The proof

We follow a proof by Milne. Let B be the integers of L. The Galois orbit of Q consists of Q and
possibly various other maximal ideals Q'. We know (B/Q)À£ is finite hence cyclic; choose a
generator g. By the Chinese Remainder Theorem we may choose y ‚àà B which reduces to g mod Q and
to 0 modulo all other primes Q' in the Galois orbit of Q. The polynomial F = ‚àè (X - œÉ y), the
product running over œÉ in the Galois group, is in B[X] and is Galois-stable so is in fact in A[X]
where A is the integers of K. If q denotes the size of A / (A ‚à© Q) and if Fbar is F mod Q
then Fbar has coefficients in ùîΩ_q and thus Fbar(y^q)=Fbar(y)^q=0, meaning that y^q is a root
of Fbar and thus congruent to œÉ y mod Q for some œÉ. This œÉ can be checked to have the following
properties:

1) œÉ Q = Q
2) œÉ g = g^q mod Q

and because g is a generator this means that œÉ is in fact the q'th power map mod Q, which
is what we want.

## Note

This was Jou Glasheen's final project for Kevin Buzzard's Formalising Mathematics course.

-/
variable (A : Type*) [CommRing A] {B : Type*} [CommRing B] [Algebra A B]

instance : MulDistribMulAction (B ‚âÉ‚Çê[A] B) (Ideal B) where
  smul œÉ I := Ideal.comap œÉ.symm I
  one_smul I := I.comap_id
  smul_one œÉ := by simp only [Ideal.one_eq_top]; rfl
  mul_smul _ _ _ := rfl
  smul_mul œÉ I J := by
    refine le_antisymm (fun x ‚Ü¶ ?_ : Ideal.comap _ _ ‚â§ _) (Ideal.le_comap_mul _)
    obtain ‚ü®y, rfl‚ü© : ‚àÉ y, œÉ y = x := ‚ü®œÉ.symm x, œÉ.apply_symm_apply x‚ü©
    rw [Ideal.mem_comap, AlgEquiv.symm_apply_apply, ‚Üê Ideal.mem_comap]
    revert y
    refine Ideal.mul_le.mpr (fun r hr s hs ‚Ü¶ ?_)
    simp only [Ideal.mem_comap, map_mul]
    exact Ideal.mul_mem_mul (Ideal.mem_comap.2 (by simp [hr])) (Ideal.mem_comap.2 <| by simp [hs])

/-
Auxiliary lemma: if `Q` is a maximal ideal of a non-field Dedekind Domain `B` with a Galois action
and if `b ‚àà B` then there's an element of `B` which is `b` mod `Q` and `0` modulo all the other
Galois conjugates of `Q`.
-/
lemma DedekindDomain.exists_y [IsDedekindDomain B] (hB : ¬¨IsField B) [Fintype (B ‚âÉ‚Çê[A] B)]
    [DecidableEq (Ideal B)] (Q : Ideal B) [Q.IsMaximal] (b : B) : ‚àÉ y : B,
    y - b ‚àà Q ‚àß ‚àÄ Q' : Ideal B, Q' ‚àà MulAction.orbit (B ‚âÉ‚Çê[A] B) Q ‚Üí Q' ‚â† Q ‚Üí y ‚àà Q' := by
  let O : Set (Ideal B) := MulAction.orbit (B ‚âÉ‚Çê[A] B) Q
  have hO : O.Finite := Set.finite_range _
  have hPrime : ‚àÄ Q' ‚àà hO.toFinset, Prime Q' := by
    intro Q' hQ'
    rw [Set.Finite.mem_toFinset] at hQ'
    obtain ‚ü®œÉ, rfl‚ü© := hQ'
    apply (MulEquiv.prime_iff <| MulDistribMulAction.toMulEquiv (Ideal B) œÉ).mp
    refine Q.prime_of_isPrime (Q.bot_lt_of_maximal hB).ne' ?_
    apply Ideal.IsMaximal.isPrime inferInstance
  obtain ‚ü®y, hy‚ü© := IsDedekindDomain.exists_forall_sub_mem_ideal (s := hO.toFinset) id (fun _ ‚Ü¶ 1)
    hPrime (fun _ _ _ _ ‚Ü¶ id) (fun Q' ‚Ü¶ if Q' = Q then b else 0)
  simp only [Set.Finite.mem_toFinset, id_eq, pow_one] at hy
  refine ‚ü®y, ?_, ?_‚ü©
  ¬∑ specialize hy Q ‚ü®1, by simp‚ü©
    simpa only using hy
  ¬∑ rintro Q' ‚ü®œÉ, rfl‚ü© hQ'
    specialize hy (œÉ ‚Ä¢ Q) ‚ü®œÉ, by simp‚ü©
    simp_all

lemma exists_y [Fintype (B ‚âÉ‚Çê[A] B)] [DecidableEq (Ideal B)] (Q : Ideal B) [Q.IsMaximal] (b : B) :
    ‚àÉ y : B, y - b ‚àà Q ‚àß ‚àÄ Q' : Ideal B, Q' ‚àà MulAction.orbit (B ‚âÉ‚Çê[A] B) Q ‚Üí Q' ‚â† Q ‚Üí y ‚àà Q' := by
  let O : Set (Ideal B) := MulAction.orbit (B ‚âÉ‚Çê[A] B) Q
  have hO' : Finite (O : Type _) := Set.finite_range _
  have hmax (I : O) : Ideal.IsMaximal (I : Ideal B) := by
    rcases I with ‚ü®_, œÉ, rfl‚ü©
    exact Ideal.comap_isMaximal_of_surjective _ (AlgEquiv.surjective œÉ.symm)
  have hPairwise : Pairwise fun (I : O) (J : O) ‚Ü¶ IsCoprime (I : Ideal B) J := fun x y h ‚Ü¶ ‚ü®1, 1, by
    simp only [Ideal.one_eq_top, Ideal.top_mul]
    exact Ideal.IsMaximal.coprime_of_ne (hmax x) (hmax y) <| mt Subtype.ext h‚ü©
  obtain ‚ü®y, hy‚ü© := Ideal.exists_forall_sub_mem_ideal (Œπ := O) hPairwise
    (fun J ‚Ü¶ if J = ‚ü®Q, 1, rfl‚ü© then b else 0)
  refine ‚ü®y, ?_, ?_‚ü©
  ¬∑ specialize hy ‚ü®Q, 1, Q.comap_id‚ü©
    simpa only using hy
  ¬∑ rintro Q' ‚ü®œÉ, rfl‚ü© hQ'
    specialize hy ‚ü®œÉ ‚Ä¢ Q, œÉ, rfl‚ü©
    simp_all

variable (Q : Ideal B) [Q.IsMaximal] [Fintype (B ‚ß∏ Q)]

noncomputable abbrev g : (B ‚ß∏ Q)À£ := (IsCyclic.exists_monoid_generator (Œ± := (B ‚ß∏ Q)À£)).choose

lemma g_spec : ‚àÄ (z : (B ‚ß∏ Q)À£), z ‚àà Submonoid.powers (g Q) :=
  (IsCyclic.exists_monoid_generator (Œ± := (B ‚ß∏ Q)À£)).choose_spec

noncomputable abbrev b : B := (Ideal.Quotient.mk_surjective (g Q : B ‚ß∏ Q)).choose

lemma b_spec : ((b Q : B) : B ‚ß∏ Q) = g Q := (Ideal.Quotient.mk_surjective (g Q : B ‚ß∏ Q)).choose_spec

variable [Fintype (B ‚âÉ‚Çê[A] B)] [DecidableEq (Ideal B)]

noncomputable abbrev y : B :=
  (exists_y A Q (b Q)).choose

lemma y_spec : (y A Q) - (b Q) ‚àà Q ‚àß
    ‚àÄ Q' : Ideal B, Q' ‚àà MulAction.orbit (B ‚âÉ‚Çê[A] B) Q ‚Üí Q' ‚â† Q ‚Üí (y A Q) ‚àà Q' :=
  (exists_y A Q (b Q)).choose_spec

open Polynomial BigOperators

/-- `F : B[X]` defined to be a product of linear factors `(X - œÑ ‚Ä¢ Œ±)`; where
`œÑ` runs over `L ‚âÉ‚Çê[K] L`, and `Œ± : B` is an element which generates `(B ‚ß∏ Q)À£`
and lies in `œÑ ‚Ä¢ Q` for all `œÑ ‚àâ (decomposition_subgroup_Ideal'  A K L B Q)`.-/
noncomputable abbrev F : B[X] := ‚àè œÑ : B ‚âÉ‚Çê[A] B, (X - C (œÑ ‚Ä¢ (y A Q)))
